Request request = new Request.Builder().url(cwanGptUploadUrl).post(body)
                    .header("accept", "application/json")
                    .header("content-type", "application/json")
                    .build();

 Parameter specified as non-null is null: method okhttp3.Request$Builder.url, parameter url

java.lang.NoSuchMethodError: 'void com.fasterxml.jackson.core.util.BufferRecycler.releaseToPool()'
	Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.context.MissingWebServerFactoryBeanException: No qualifying bean of type 'org.springframework.boot.web.servlet.server.ServletWebServerFactory' available: Unable to start AnnotationConfigServletWebServerApplicationContext due to missing ServletWebServerFactory bean

Web application could not be started as there was no org.springframework.boot.web.servlet.server.ServletWebServerFactory bean defined in the context.


git config pull.rebase false  # merge
hint:   git config pull.rebase true   # rebase
hint:   git config pull.ff only       # fast-forward only







public int minOperations(int n) {

        if(n==0)
            return 0;
        Set<Integer> set = new HashSet<>();
        int value=1;
        int maxNumber=0;
        int minNumber=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){

            maxNumber=Math.max(maxNumber,value);
            minNumber=Math.min(minNumber,value);
            set.add(value);
            if(value==n)
                return 1;
            if(value>n)
                break;
            value*=2;


        }
        Map<Integer,Long> map = new HashMap<>();
        Set<Integer> inoperation=new HashSet<>();
        inoperation.add(n);
        long ans= minOperation(n,set,map,maxNumber,inoperation);
        return (int)ans;


    }

    private long minOperation(int n, Set<Integer> set, Map<Integer, Long> map,int maxNumber,Set<Integer> inoperation) {

        if(n==0)
            return 0;
        if(n>maxNumber)
            return Integer.MAX_VALUE;
        if(n<0)
            return Integer.MAX_VALUE;

        if(map.containsKey(n))
            return map.get(n);
        Iterator<Integer> iterator = set.iterator();
        long min=Long.MAX_VALUE;
        while(iterator.hasNext()){
            int value = iterator.next();
            if(map.containsKey(n+value))
            min=Math.min(min,1+map.get(n+value));
            else {
                if(inoperation.contains(n+value))
                    continue;
                inoperation.add(n+value);
                long result=minOperation(n+value,set,map,maxNumber,inoperation);
                map.put(n+value,result);
                inoperation.remove(n+value);

                min=Math.min(min,1+map.get(n+value));
            }
            // minus
            if(map.containsKey(n-value) )
                min=Math.min(min,1+map.get(n-value));
            else {
                if(inoperation.contains(n-value))
                    continue;
                inoperation.add(n-value);
                long result=minOperation(n-value,set,map,maxNumber,inoperation);
                map.put(n-value,result);
                inoperation.remove(n-value);

                min=Math.min(min,1+map.get(n-value));
            }
        }
        return min;
        //https://leetcode.com/problems/minimum-operations-to-reduce-an-integer-to-0/submissions/1463282670/
    }


//////// CODE /////////////


import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;
import software.amazon.awssdk.auth.credentials.AwsCredentials;
import software.amazon.awssdk.auth.credentials.SsoCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.sso.SsoClient;
import software.amazon.awssdk.services.sso.model.GetRoleCredentialsRequest;
import software.amazon.awssdk.services.sso.model.GetRoleCredentialsResponse;
import software.amazon.awssdk.services.sso.model.ListAccountsRequest;
import software.amazon.awssdk.services.sso.model.ListAccountsResponse;
import software.amazon.awssdk.services.sso.model.RoleInfo;

public class AwsSsoWithoutCli {

    public static void main(String[] args) {
        // Replace with your SSO details
        String ssoStartUrl = "https://your-sso-portal.awsapps.com/start";
        String ssoRegion = "us-east-1";
        String accountId = "123456789012"; // Target AWS account ID
        String roleName = "AWSAdministratorAccess"; // Role to assume

        Region region = Region.of(ssoRegion);

        // Initialize the SSO Client
        try (SsoClient ssoClient = SsoClient.builder()
                .region(region)
                .build()) {

            // STEP 1: Authenticate and fetch available accounts
            ListAccountsResponse accountsResponse = ssoClient.listAccounts(
                    ListAccountsRequest.builder()
                            .accessToken(getAccessToken(ssoStartUrl))
                            .build()
            );

            // STEP 2: Fetch role credentials for the desired account and role
            GetRoleCredentialsResponse credentialsResponse = ssoClient.getRoleCredentials(
                    GetRoleCredentialsRequest.builder()
                            .accessToken(getAccessToken(ssoStartUrl))
                            .accountId(accountId)
                            .roleName(roleName)
                            .build()
            );

            // STEP 3: Extract credentials
            AwsSessionCredentials credentials = AwsSessionCredentials.create(
                    credentialsResponse.roleCredentials().accessKeyId(),
                    credentialsResponse.roleCredentials().secretAccessKey(),
                    credentialsResponse.roleCredentials().sessionToken()
            );

            // Print credentials
            System.out.println("AWS Access Key ID: " + credentials.accessKeyId());
            System.out.println("AWS Secret Access Key: " + credentials.secretAccessKey());
            System.out.println("AWS Session Token: " + credentials.sessionToken());
        }
    }

    private static String getAccessToken(String ssoStartUrl) {
        // Placeholder for fetching access token dynamically
        // Implement token retrieval based on your SSO portal configuration
        throw new UnsupportedOperationException("Implement token fetching logic here.");
    }
}

